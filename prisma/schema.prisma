// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// === To edit ===
model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  preferences   Preferences?
  timer         Timer?

  subjects Subject[]
  logs     Log[]
}

model Timer {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  subject     Subject   @relation(fields: [subjectId], references: [id])
  subjectId   String    @unique
  duration    Int
  startedAt   DateTime?
  pausedAt    DateTime?
  deadlineAt  DateTime?
  tags        String[] // Optional: ["flashcards", "lecture"]
  description String? // Optional free-form field
}

model Preferences {
  id            String  @id @default(cuid())
  user          User    @relation(fields: [userId], references: [id])
  userId        String  @unique
  shareActivity Boolean
  goal          Int
  semesterStart DateTime
  semesterFinish DateTime
  completedIntro DateTime?
  showHeatmap Boolean @default(false)
}

model Subject {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  name      String
  colour    String
  order     Int
  logs      Log[]
  timer     Timer?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name]) // user canâ€™t have two subjects with same name
}

enum ColourType {
  RED
  ORANGE
  YELLOW
  GREEN
  BLUE
  PINK
  PURPLE
}

model Log {
  id          String   @id @default(cuid())
  subject     Subject  @relation(fields: [subjectId], references: [id])
  subjectId   String
  startedAt   DateTime
  endedAt     DateTime
  tags        String[] // Optional: ["flashcards", "lecture"]
  description String? // Optional free-form field
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
  duration    Int

  @@index([subjectId, startedAt])
}
